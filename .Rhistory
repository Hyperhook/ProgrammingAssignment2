library("swirl")
swirl()
library('swirl')
swirl()
1:20
pi:10
15:1
':'
?':'
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times = 40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each = 10)
num_vect <- 0.5,55,-10,6
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name <- c(my_char,"Giulio")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
library('swirl')
swirl
swirl()
x <- c(44,NA,5,NA)
x*3
?rnorm
y <- rnorm(1000)
y
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
?sample
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na == TRUE)
sum(my_na)
my_data
0/0
Inf - Inf
exit()
bye()
cube <- function(x,n){
x^3
}
cube(3)
x <- 1:10
if(x>5)x<-0
f <- function(x){g <- function(y){y+z}z<-4 x+g(x)}
f <- function(x){
g <- function(y)y+z
z <- 4
x+g(x)
}
z <- 10
f(3)
x <-5
y <- if(x<3){
NA
} else{
10
}
y
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vectro)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data=1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
?sample
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints < 0)
all(ints > 0)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
submit()
my_mean(c(4,5,10))
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4,div=2)
args(remainder)
submit()
?dev
?deviation
evaluate(c(1.4,3.6,7.9,8.8))
?var
evaluate(var(c(1.4,3.6,7.9,8.8))
end
evaluate(var(c(1.4,2.6,7.9,8.8)))
evaluate(var,c(1.4,2.6,7.9,8.8))
evaluate(sd,c(1.4,2.6,7.9,8.8))
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1],c(8,4,0)})
evaluate(function(x){x[1]},c(8,4,0)})
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){tail(x)},c(8,4,0))
evaluate(function(x){tail(x,n=1)},c(8,4,0))
evaluate(function(x){return (x[length(x)])},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun")
paste("Programming","is","fun!")
submit()
telegram("Don't stop baby")
submit()
mad_libs("suck","my","balls")
submit()
submit()
'I' %p% 'love' %p% 'R'
%p%('I'',love','R')
'I' %p% 'love' %p% 'R'
skip()
submit()
'I' %p% 'love' %p% 'R!'
swirl()
'I' %p% 'love' %p% 'R!'
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem)elem[2])
?matrix
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(c(1,2,3,4))
a
a
a$get()
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
a$get()
cachemean(a)
a$get()
a$setmean()
a$setmean(0)
a$getmean()
a$get()
cachemean(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <-- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <-- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a <- makeVector(c(10,20,30,40))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <-- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a <- makeVector(c(10,20,30,40))
?<--
?<-
<-
help
source("cachematrix.R")
getwd()
setwd("D:/Programming/Courses/R/homework2")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4)),nrow=2,ncol=2)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4)))
source("cachematrix.R")
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4)))
amatrix$get()
source("cachematrix.R")
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4)),nrow=2,ncol=2)
source("cachematrix.R")
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4)),nrow=2,ncol=2)
source("cachematrix.R")
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4)),nrow=2,ncol=2)
source("cachematrix.R")
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4)),nrow=2,ncol=2)
source("cachematrix.R")
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4)nrow=2,ncol=2)
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4)nrow=2,ncol=2))
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4),nrow=2,ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getInverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(9,5,99,66),nrow=2,ncol=2))
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66),nrow=2,ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getInverse()
clean
?ls
?clean
?cls
cls()
cls
exit
library(datasets)
data(iris)
?iris
names(iris)
iris$Species
mean(Sepal.Length$virginica)
mean("Sepal.Length"$virginica)
?lapply
?sapply
sapply(iris[,Petal.Length],mean)
?colname
?colnames
colnames(iris)
sapply(iris[,"Petal.Length"],mean)
mean(iris["Petal.Length"])
rownames(iris)
?tapply
sapply(iris[,"Petal.Length"$virginica],mean)
type(iris)
/object
?object
?type
typeof(iris)
x <- iris[,"Petal.Length"] where iris$Species == "virginica"
colnames(iris)
View(iris)
View(iris)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_vect)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
View(flags)
View(flags)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem)elem[2])
exit
head(iris)
length(iris)
class(iris)
?rows
petal <- iris[,"Petal.Length"]
petal
mean(petal[101:150])
?colMeans
colMeans(iris)
apply(iris,1,mean)
apply(iris[,1:4],mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
test1 <- apply(iris[,1:4],2,mean)
class(test1)
test1
tes2 <- apply(iris[,1:4],1,mean)
class(test2)
class(tes2)
apply(iris,1,mean)
library(datasets)
data(mtcars)
view(mtcars)
flags(mtcars)
